{"ast":null,"code":"var _jsxFileName = \"/Users/ayselpolat/Documents/react-projects/15-cocktails/setup/src/context.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\nconst url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"a\");\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const {\n        drinks\n      } = data;\n      console.log(data);\n\n      if (drinks) {\n        const newCocktail = drinks.map(drink => {\n          const {\n            idDrink,\n            strAlcoholic,\n            strDrink,\n            strDrinkThumb,\n            strGlass\n          } = drink;\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            glass: strGlass,\n            info: strAlcoholic\n          };\n        });\n        setCocktails(newCocktail);\n      } else {\n        setCocktails([]);\n      }\n\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      loading,\n      cocktails,\n      setSearchTerm\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, children);\n}; // make sure use\n\n\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\nexport { AppContext, AppProvider };","map":{"version":3,"sources":["/Users/ayselpolat/Documents/react-projects/15-cocktails/setup/src/context.js"],"names":["React","useState","useContext","useEffect","useCallback","url","AppContext","createContext","AppProvider","children","loading","setLoading","searchTerm","setSearchTerm","cocktails","setCocktails","fetchDrinks","response","fetch","data","json","drinks","console","log","newCocktail","map","drink","idDrink","strAlcoholic","strDrink","strDrinkThumb","strGlass","id","name","image","glass","info","error","useGlobalContext"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,MAAMC,GAAG,GAAG,2DAAZ;AACA,MAAMC,UAAU,GAAGN,KAAK,CAACO,aAAN,EAAnB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACpC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,GAAD,CAA5C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;;AAEA,QAAMe,WAAW,GAAG,YAAY;AAC9BL,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,QAAI;AACF,YAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEb,GAAI,GAAEO,UAAW,EAArB,CAA5B;AACA,YAAMO,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAaF,IAAnB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,UAAIE,MAAJ,EAAY;AACV,cAAMG,WAAW,GAAGH,MAAM,CAACI,GAAP,CAAYC,KAAD,IAAW;AACxC,gBAAM;AAAEC,YAAAA,OAAF;AAAWC,YAAAA,YAAX;AAAyBC,YAAAA,QAAzB;AAAmCC,YAAAA,aAAnC;AAAkDC,YAAAA;AAAlD,cACJL,KADF;AAEA,iBAAO;AACLM,YAAAA,EAAE,EAAEL,OADC;AAELM,YAAAA,IAAI,EAAEJ,QAFD;AAGLK,YAAAA,KAAK,EAAEJ,aAHF;AAILK,YAAAA,KAAK,EAAEJ,QAJF;AAKLK,YAAAA,IAAI,EAAER;AALD,WAAP;AAOD,SAVmB,CAApB;AAWAb,QAAAA,YAAY,CAACS,WAAD,CAAZ;AACD,OAbD,MAaO;AACLT,QAAAA,YAAY,CAAC,EAAD,CAAZ;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAtBD,CAsBE,OAAO0B,KAAP,EAAc;AACdf,MAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACA1B,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GA5BD;;AA8BAR,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,WAAW;AACZ,GAFQ,EAEN,CAACJ,UAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAAEF,MAAAA,OAAF;AAAWI,MAAAA,SAAX;AAAsBD,MAAAA;AAAtB,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,QADH,CADF;AAKD,CA5CD,C,CA6CA;;;AACA,OAAO,MAAM6B,gBAAgB,GAAG,MAAM;AACpC,SAAOpC,UAAU,CAACI,UAAD,CAAjB;AACD,CAFM;AAIP,SAASA,UAAT,EAAqBE,WAArB","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport { useCallback } from \"react\";\n\nconst url = \"https://www.thecocktaildb.com/api/json/v1/1/search.php?s=\";\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"a\");\n  const [cocktails, setCocktails] = useState([]);\n\n  const fetchDrinks = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${url}${searchTerm}`);\n      const data = await response.json();\n      const { drinks } = data;\n      console.log(data);\n      if (drinks) {\n        const newCocktail = drinks.map((drink) => {\n          const { idDrink, strAlcoholic, strDrink, strDrinkThumb, strGlass } =\n            drink;\n          return {\n            id: idDrink,\n            name: strDrink,\n            image: strDrinkThumb,\n            glass: strGlass,\n            info: strAlcoholic,\n          };\n        });\n        setCocktails(newCocktail);\n      } else {\n        setCocktails([]);\n      }\n      setLoading(false);\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchDrinks();\n  }, [searchTerm]);\n\n  return (\n    <AppContext.Provider value={{ loading, cocktails, setSearchTerm }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n// make sure use\nexport const useGlobalContext = () => {\n  return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n"]},"metadata":{},"sourceType":"module"}